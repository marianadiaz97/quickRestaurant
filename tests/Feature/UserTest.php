<?php

namespace Tests\Feature;

use App\Models\Restaurant;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @testdox Pruebas del Modulo de Usuarios/AutenticaciÃ³n
 */
class UserTest extends TestCase
{
    use WithFaker;
    use RefreshDatabase;

    protected $user;
    protected $admin;
    protected $owner;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        /**@var User $admin*/
        $admin = User::factory()->create();
        $admin->assignRole('admin');
        $this->admin = $admin;

        /**@var User $owner*/
        $owner = User::factory()->create();
        $owner->assignRole('owner');
        $this->owner = $owner;

    }

    /**
     * @testdox Usuario se puede registrar
     **/
    public function testUserCanRegister()
    {
        /**@var User $user*/
        $user = User::factory()->make();
        $response = $this->post("/register", [
            'first_name' => $user->first_name,
            'last_name' => $user->last_name,
            'phone' => $user->phone,
            'email' => $user->email,
        ]);
        $response->assertStatus(200);
        $userAssert = User::query()->where('email', $user->email)->first();
        $this->assertEquals($user->first_name, $userAssert->first_name);
    }

    /**
     * @testdox Usuario se puede autenticar en la plataforma
     **/
    public function testUserCanAuth()
    {
        /**@var User $user*/
        $user = User::factory()->create();

        $response = $this->post("/login", [
            'email' => $user->email,
            'password' => $user->phone
        ]);
        $response->assertStatus(200);
    }

    /**
     * @testdox Administrador puede listar los usuarios
     **/
    public function testAdminCanListProducts()
    {
        $this->actingAs($this->admin);
        $response = $this->get("/users");
        $response->assertStatus(200);
    }

    /**
     * @testdox Propietario puede listar sus usuarios
     **/
    public function testOwnerCanListProducts()
    {
        $this->actingAs($this->owner);
        $response = $this->get("/users");
        $response->assertStatus(200);
    }

    /**
     * @testdox Administrador puede crear usuarios
     **/
    public function testAdminCanCreateUsers()
    {
        $this->actingAs($this->admin);
        /**@var User $user*/
        $user = User::factory()->make();

        $response = $this->post("/users", [
            'first_name' => $user->first_name,
            'last_name' => $user->last_name,
            'phone' => $user->phone,
            'email' => $user->email,
            'role_id' => 'client',
        ]);

        $response->assertRedirect("/users");
        $userAssert = User::query()->where('email', $user->email)->first();
        $this->assertNotNull($userAssert);
    }

    /**
     * @testdox Propietario puede crear usuarios en su restaurante
     **/
    public function testOwnerCanCreateUsers()
    {
        $this->actingAs($this->owner);
        /**@var User $user*/
        $user = User::factory()->make();

        $response = $this->post("/users", [
            'first_name' => $user->first_name,
            'last_name' => $user->last_name,
            'phone' => $user->phone,
            'email' => $user->email,
            'role_id' => 'client',
        ]);

        $response->assertRedirect("/users");
        $userAssert = User::query()->where('email', $user->email)->first();
        $this->assertNotNull($userAssert);
    }

    /**
     * @testdox Administrador puede editar usuarios
     **/
    public function testAdminCanEditUsers()
    {
        $this->actingAs($this->admin);
        /**@var User $user*/
        $user = User::factory()->create();
        /**@var Restaurant $restaurant*/
        $restaurant = Restaurant::factory()->create([
            'user_id' => $user->id
        ]);

        $response = $this->patch("/users/$user->id", [
            'first_name' => $user->first_name,
            'last_name' => $user->last_name,
            'name' => $user->name,
            'phone' => $user->phone,
            'email' => $user->email,
            'role_id' => 'client',
            'restaurants_id' => [$restaurant->id]
        ]);

        $response->assertRedirect("/users");
        $userAssert = User::query()->where('email', $user->email)->first();
        $this->assertNotNull($userAssert);
    }

    /**
     * @testdox Propietario puede editar usuarios en su restaurante
     **/
    public function testOwnerCanEditUsers()
    {
        $this->actingAs($this->owner);
        /**@var User $user*/
        $user = User::factory()->create();
        /**@var Restaurant $restaurant*/
        $restaurant = Restaurant::factory()->create([
            'user_id' => $user->id
        ]);

        $response = $this->patch("/users/$user->id", [
            'first_name' => $user->first_name,
            'last_name' => $user->last_name,
            'name' => $user->name,
            'phone' => $user->phone,
            'email' => $user->email,
            'role_id' => 'client',
            'restaurants_id' => [$restaurant->id]
        ]);

        $response->assertRedirect("/users");
        $userAssert = User::query()->where('email', $user->email)->first();
        $this->assertNotNull($userAssert);
    }

}
