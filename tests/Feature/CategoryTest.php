<?php

namespace Tests\Feature;

use App\Models\Category;
use App\Models\Product;
use App\Models\Restaurant;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @testdox Pruebas del Modulo de Categorías
 */
class CategoryTest extends TestCase
{
    use WithFaker;
    use RefreshDatabase;

    protected $restaurant;
    protected $admin;
    protected $owner;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        /**@var User $admin*/
        $admin = User::factory()->create();
        $admin->assignRole('admin');
        $this->admin = $admin;


        /**@var User $owner*/
        $owner = User::factory()->create();
        $owner->assignRole('owner');
        $this->owner = $owner;

        /**@var Restaurant $restaurant*/
        $restaurant = Restaurant::factory()->create([
            'user_id' => $this->owner->id
        ]);
        $this->restaurant = $restaurant;

    }

    /**
     * @testdox Administrador puede listar las categorías de restaurantes
     **/
    public function testAdminCanListCategories()
    {
        $this->actingAs($this->admin);
        $restaurant = $this->restaurant;
        $response = $this->get("/restaurants/$restaurant->id/categories");
        $response->assertStatus(200);
    }

    /**
     * @testdox Propietario puede listar las categorías de restaurantes
     **/
    public function testOwnerCanListCategories()
    {
        $this->actingAs($this->owner);
        $restaurant = $this->restaurant;
        $response = $this->get("/restaurants/$restaurant->id/products");
        $response->assertStatus(200);
    }

    /**
     * @testdox Administrador puede crear categorías
     **/
    public function testAdminCanCreateCategories()
    {
        $this->actingAs($this->admin);
        $restaurant = $this->restaurant;

        /**@var Product $product*/
        $product = Product::factory()->create([
            'name' => 'Arroz',
            'restaurant_id' => $restaurant->id
        ]);

        /**@var Product $productTwo*/
        $productTwo = Product::factory()->create([
            'name' => 'Papas',
            'restaurant_id' => $restaurant->id
        ]);

        $response = $this->post("/restaurants/$restaurant->id/categories/create", [
            'name' => 'Entradas',
            'products_id' => [$product->id, $productTwo->id]
        ]);

        $response->assertRedirect("/restaurants/$restaurant->id/categories");
        $category = Category::query()->first();
        $this->assertNotNull($category);
        $this->assertEquals('Entradas', $category->name);
    }


    /**
     * @testdox Propietario puede crear categorías
     **/
    public function testOwnerCanCreateCategories()
    {
        $this->actingAs($this->owner);
        $restaurant = $this->restaurant;

        /**@var Product $product*/
        $product = Product::factory()->create([
            'name' => 'Arroz',
            'restaurant_id' => $restaurant->id
        ]);

        /**@var Product $productTwo*/
        $productTwo = Product::factory()->create([
            'name' => 'Papas',
            'restaurant_id' => $restaurant->id
        ]);

        $response = $this->post("/restaurants/$restaurant->id/categories/create", [
            'name' => 'Entradas',
            'products_id' => [$product->id, $productTwo->id]
        ]);

        $response->assertRedirect("/restaurants/$restaurant->id/categories");
        $category = Category::query()->first();
        $this->assertNotNull($category);
        $this->assertEquals('Entradas', $category->name);
    }

    /**
     * @testdox Administrador puede editar categorías
     **/
    public function testAdminCanEditCategories()
    {
        $this->actingAs($this->admin);
        $restaurant = $this->restaurant;

        /**@var Category $category*/
        $category = Category::factory()->create([
            'name' => 'Entradas',
            'restaurant_id' => $restaurant->id
        ]);

        /**@var Product $product*/
        $product = Product::factory()->create([
            'name' => 'Arroz',
            'restaurant_id' => $restaurant->id
        ]);

        /**@var Product $productTwo*/
        $productTwo = Product::factory()->create([
            'name' => 'Papas',
            'restaurant_id' => $restaurant->id
        ]);

        $category->products()->sync([$product->id, $productTwo->id]);

        $response = $this->patch("/restaurants/$restaurant->id/categories/$category->id", [
            'name' => 'Entradas Dos',
            'products_id' => [$product->id]
        ]);

        $response->assertRedirect("/restaurants/$restaurant->id/categories");
        $category->refresh();
        $this->assertNotNull($category);
        $this->assertEquals('Entradas Dos', $category->name);
        $this->assertCount(1, $category->products);
    }

    /**
     * @testdox Propietario puede editar categorías
     **/
    public function testOwnerCanEditCategories()
    {
        $this->actingAs($this->owner);
        $restaurant = $this->restaurant;

        /**@var Category $category*/
        $category = Category::factory()->create([
            'name' => 'Entradas',
            'restaurant_id' => $restaurant->id
        ]);

        /**@var Product $product*/
        $product = Product::factory()->create([
            'name' => 'Arroz',
            'restaurant_id' => $restaurant->id
        ]);

        /**@var Product $productTwo*/
        $productTwo = Product::factory()->create([
            'name' => 'Papas',
            'restaurant_id' => $restaurant->id
        ]);

        $category->products()->sync([$product->id, $productTwo->id]);

        $response = $this->patch("/restaurants/$restaurant->id/categories/$category->id", [
            'name' => 'Entradas Dos',
            'products_id' => [$product->id]
        ]);

        $response->assertRedirect("/restaurants/$restaurant->id/categories");
        $category->refresh();
        $this->assertNotNull($category);
        $this->assertEquals('Entradas Dos', $category->name);
        $this->assertCount(1, $category->products);
    }

    /**
     * @testdox Administrador puede eliminar categorías
     **/
    public function testAdminCanDeleteCategory()
    {
        $response = $this->get('/');
        $response->assertStatus(200);
    }

    /**
     * @testdox Propietario puede eliminar categorías
     **/
    public function testOwnerCanDeleteCategory()
    {
        $response = $this->get('/');
        $response->assertStatus(200);
    }
}
