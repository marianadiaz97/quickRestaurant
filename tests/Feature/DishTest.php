<?php

namespace Tests\Feature;

use App\Models\Category;
use App\Models\Dish;
use App\Models\Product;
use App\Models\Restaurant;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @testdox Pruebas del Modulo de Platos
 */
class DishTest extends TestCase
{
    use WithFaker;
    use RefreshDatabase;

    protected $restaurant;
    protected $admin;
    protected $owner;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        /**@var User $admin*/
        $admin = User::factory()->create();
        $admin->assignRole('admin');
        $this->admin = $admin;


        /**@var User $owner*/
        $owner = User::factory()->create();
        $owner->assignRole('owner');
        $this->owner = $owner;

        /**@var Restaurant $restaurant*/
        $restaurant = Restaurant::factory()->create([
            'user_id' => $this->owner->id
        ]);
        $this->restaurant = $restaurant;

    }

    /**
     * @testdox Administrador puede listar los platos de restaurantes
     **/
    public function testAdminCanListDishes()
    {
        $this->actingAs($this->admin);
        $restaurant = $this->restaurant;
        $response = $this->get("/restaurants/$restaurant->id/dishes");
        $response->assertStatus(200);
    }

    /**
     * @testdox Propietario puede listar las platos de sus restaurantes
     **/
    public function testOwnerCanListDishes()
    {
        $this->actingAs($this->owner);
        $restaurant = $this->restaurant;
        $response = $this->get("/restaurants/$restaurant->id/dishes");
        $response->assertStatus(200);
    }

    /**
     * @testdox Administrador puede crear los platos de restaurantes
     **/
    public function testAdminCanCreateDishes()
    {
        $this->actingAs($this->admin);
        $restaurant = $this->restaurant;

        /**@var Category $category*/
        $category = Category::factory()->create([
            'name' => 'Entradas',
            'restaurant_id' => $restaurant->id
        ]);

        $response = $this->post("/restaurants/$restaurant->id/dishes/create", [
            'name' => 'Menú del día',
            'price' => 12000,
            'categories_id' => [$category->id]
        ]);

        $response->assertRedirect("/restaurants/$restaurant->id/dishes");

        /**@var Dish $dish*/
        $dish = Dish::query()->first();
        $this->assertEquals('Menú del día', $dish->name);
    }

    /**
     * @testdox Propietario puede crear los platos de restaurantes
     **/
    public function testOwnerCanCreateDishes()
    {
        $this->actingAs($this->admin);
        $restaurant = $this->restaurant;

        /**@var Category $category*/
        $category = Category::factory()->create([
            'name' => 'Entradas',
            'restaurant_id' => $restaurant->id
        ]);

        $response = $this->post("/restaurants/$restaurant->id/dishes/create", [
            'name' => 'Menú del día',
            'price' => 12000,
            'categories_id' => [$category->id]
        ]);

        $response->assertRedirect("/restaurants/$restaurant->id/dishes");

        /**@var Dish $dish*/
        $dish = Dish::query()->first();
        $this->assertEquals('Menú del día', $dish->name);
    }

    /**
     * @testdox Administrador puede eliminar platos
     **/
    public function testAdminCanDeleteDish()
    {
        $response = $this->get('/');
        $response->assertStatus(200);
    }

    /**
     * @testdox Propietario puede eliminar platos
     **/
    public function testOwnerCanDeleteDish()
    {
        $response = $this->get('/');
        $response->assertStatus(200);
    }

}
